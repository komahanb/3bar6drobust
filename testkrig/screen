 >> Number of Processors =   8
 
 ***********************************************
           Robust optimization using KRIGING
 ***********************************************
 
 
 =======================================================
 			Kriging				   
 =======================================================
 
 >> Hello, from processor [  1 ] of [  8 ]
 >> Hello, from processor [  2 ] of [  8 ]
 >> Hello, from processor [  4 ] of [  8 ]
 >> Hello, from processor [  8 ] of [  8 ]
 >> Hello, from processor [  7 ] of [  8 ]
 >> Hello, from processor [  6 ] of [  8 ]
 >> Hello, from processor [  5 ] of [  8 ]
 >> Hello, from processor [  3 ] of [  8 ]
 >> Initial Sample Points by Latin Hypercube
      >> Output to sample.dat  100
 >> Reading KrigSet.inp
      >> # of Optimizing Functions =    1
      >> # of Constraint Functions =    0
      >> # of K/DCOK/ICOK/DUM/VFM  =    0   1   0   1   1
      >> # of Max Sample/G/H/Hv    =    0************
      >> Ordinary Kriging
      >> Use Wendland C4 SCF
      >> Use All Hess for Direct Cokriging
      >> Add epsilon on Diagonal Rij, epsilon =   0.222E-15
      >> Cross Correlation Relaxation Factor  =   0.9999000
 >> Reading sample.dat
      >> # of DV, Func, Samples =     6    2  100
      >> # of Fidelity Levels   =     1
      >> Fidelity Level :  1
           >> # of Samples(F     )    =   100
      >> Min. Dist. between Fidelity-1 Samples ( 13, 17 ) =  0.15E+00
 
 >> Best design: Sample point  37 Fct value   1.4624567
    with X value   0.8826363   0.7058476   0.3740830   0.3517873   0.1546929   0.9489548
 
 >> Reduce Sample Points for Function  1
           >> # of Modes in Fid-1 = 100   0   0   0   0   0 100
           >> # of Modes (sum)    = 100   0   0   0   0   0
 >> Size of Correlation Matrix =    100
 *mdv   != ndv in paramGALN.inp                 
 *mdat  != ndat in paramGALN.inp                 
 *meva  != neva in paramGALN.inp                 
 >> Reading Parameter from paramGALN.inp
      >> # of Population       =    24
      >> # of Generation       =    24
      >> # of Design Variables =     6
      >> # of Objectives       =     1
      >> Set of Objectives     :   Max
      >> Likelihood Maximization for Theta
 >> Check Again the Parameters Setting
      >> Use new sharing function (index-based)
      >> Use old fitness function (1/rank)
      >> Use blended crossover
           >> Probability of directional crossover =    0.100   0.100
           >> Probability of neighborhood cultivation =    0.500   0.500
      >> Use old uniform mutation
 >> Make Initial Population by LHS
 >> Calling evaluation in GA
 >> Starting Main Loop of GA*****
      >>    1 Pareto Designs until   0 Gen.,  0.354E+03
      >>    1 Pareto Designs until  12 Gen.,  0.639E+03
      >>    1 Pareto Designs until  24 Gen.,  0.642E+03
 >> Finishing Main Loop of GA
 >> Output Results....
      >> Best Design for  1 : (  24  11) :  0.6419E+03
      >> # of Function Evaluations for New Ones  =      600
      >> # of Function Evaluations for Gradient  =        0
      >> # of Function Evaluations for 1D Search =        0
      >> # of Function Evaluations in Total      =      600
      >> Best Design =  641.921   0.000
      >> Theta =    0.069   0.027   0.030   0.021   0.039   0.023
 >> Theta      =    0.069   0.027   0.030   0.021   0.039   0.023
 >> Deviation  =     0.23552E+01
 >> Likelihood =     0.64192E+03 with Error =     0.17928E-04
 >> Output to meta01.krg
      >> RMSE on All Sample Points    =    0.14248E-07 among   100 pts
 
 >> Best design: Sample point  37 Fct value   1.4624567
    with X value   0.8826363   0.7058476   0.3740830   0.3517873   0.1546929   0.9489548
 
 >> Make "dak" Database for metamodel
 
 >> Best design: Sample point  37 Fct value   1.4624567
    with X value   0.8826363   0.7058476   0.3740830   0.3517873   0.1546929   0.9489548
 
 >> MonteCarlo Simulation on Kriging Model
      >> Target Function =   1
      >> All Design Variables Fluctuated
      >> # of Monte-Carlo Samples =    10000
           >> [         1      1250 ] for Processor  0
           >> [      1251      2500 ] for Processor  1
           >> [      6251      7500 ] for Processor  5
           >> [      3751      5000 ] for Processor  3
           >> [      5001      6250 ] for Processor  4
           >> [      8751     10000 ] for Processor  7
           >> [      2501      3750 ] for Processor  2
           >> [      7501      8750 ] for Processor  6
